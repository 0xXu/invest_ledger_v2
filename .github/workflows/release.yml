name: 🚀 Release Build and Deploy

on:
  push:
    tags:
      - "v*.*.*"
  workflow_dispatch:
    inputs:
      version:
        description: "版本号 (例如: 1.0.0)"
        required: true
        type: string
      release_notes:
        description: "发布说明"
        required: false
        type: string
        default: ""
      prerelease:
        description: "是否为预发布版本"
        required: false
        type: boolean
        default: false

env:
  FLUTTER_VERSION: "3.32.0"
  JAVA_VERSION: "17"

jobs:
  # 构建Android APK
  build-android:
    name:  构建 Android APK
    runs-on: ubuntu-latest

    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 Java
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: ${{ env.JAVA_VERSION }}

      - name: 设置 Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true

      - name: Clean Flutter build artifacts
        run: flutter clean

      - name: 获取依赖
        run: |
          flutter pub get
          flutter pub run build_runner build --delete-conflicting-outputs

      - name: 创建环境配置文件
        run: |
          echo "SUPABASE_URL=${{ secrets.SUPABASE_URL }}" > .env
          echo "SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY }}" >> .env

      - name: 设置 Android 签名
        run: |
          echo "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 -d > android/upload-keystore.jks
          echo "storePassword=${{ secrets.ANDROID_KEYSTORE_PASSWORD }}" > android/key.properties
          echo "keyPassword=${{ secrets.ANDROID_KEY_PASSWORD }}" >> android/key.properties
          echo "keyAlias=${{ secrets.ANDROID_KEY_ALIAS }}" >> android/key.properties
          echo "storeFile=../upload-keystore.jks" >> android/key.properties
          echo "org.gradle.jvmargs=-Xmx4096m" >> android/gradle.properties
          echo "org.gradle.vfs.watch=false" >> android/gradle.properties
          
          # 验证签名配置文件
          echo "🔐 验证签名配置："
          ls -la android/key.properties
          ls -la android/upload-keystore.jks
          echo "✅ 签名文件创建成功"

      - name: 生成 Gradle Wrapper
        run: |
          cd android
          # 使用系统gradle生成wrapper
          gradle wrapper --gradle-version=8.12 --distribution-type=all
          # 验证wrapper文件
          ls -la gradlew gradlew.bat
          chmod +x gradlew
          echo "✅ Gradle wrapper 生成完成"

      - name: 构建 APK
        run: |
          # 获取版本号
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION=${GITHUB_REF#refs/tags/v}
          fi

          # 从pubspec.yaml获取当前版本号和构建号
          PUBSPEC_VERSION=$(grep '^version:' pubspec.yaml | sed 's/version: //')
          VERSION_NAME=$(echo $PUBSPEC_VERSION | cut -d'+' -f1)
          BUILD_NUMBER=$(echo $PUBSPEC_VERSION | cut -d'+' -f2)

          echo "📱 版本信息:"
          echo "  - pubspec.yaml版本: $PUBSPEC_VERSION"
          echo "  - 版本名称: $VERSION_NAME"
          echo "  - 构建号: $BUILD_NUMBER"

          # 如果是手动触发或标签触发，使用指定的版本号
          if [[ -n "$VERSION" ]]; then
            VERSION_NAME="$VERSION"
            echo "  - 使用指定版本: $VERSION_NAME"
          fi

          # 使用Gradle直接构建APK（绕过Flutter的文件查找问题）
          echo "🚀 开始构建APK..."
          
          # 首先运行Flutter预构建步骤来生成必要的文件
          flutter build apk --release --build-name=$VERSION_NAME --build-number=$BUILD_NUMBER --no-gradle || echo "Flutter预构建完成（忽略错误）"
          
          # 然后使用Gradle直接构建
          cd android
          ./gradlew assembleRelease -PversionName=$VERSION_NAME -PversionCode=$BUILD_NUMBER --stacktrace --info
          cd ..

          # 检查Gradle构建是否成功
          if [ ! -f "android/app/build/outputs/apk/release/app-release.apk" ]; then
            echo "❌ Gradle构建失败，APK文件未生成"
            exit 1
          fi
          echo "✅ Gradle构建完成"
          
          # 创建Flutter期望的目录结构
          mkdir -p build/app/outputs/flutter-apk/
          
          # 复制APK到Flutter期望的位置
          cp android/app/build/outputs/apk/release/app-release.apk build/app/outputs/flutter-apk/
          echo "✅ APK已复制到Flutter标准位置"

          # 详细检查构建结果
          echo "🔍 检查构建目录结构："
          find build -name "*.apk" -type f || echo "❌ 没有找到APK文件"
          
          echo "🔍 检查Android构建目录："
          find android -name "*.apk" -type f || echo "❌ Android目录中没有APK文件"
          
          echo "🔍 完整构建目录结构："
          ls -la build/app/outputs/ || echo "❌ outputs目录不存在"
          
          # 如果标准位置没有APK，检查其他可能位置
          if [ ! -f "build/app/outputs/flutter-apk/app-release.apk" ]; then
            echo "🔧 标准位置没有APK，搜索所有可能位置..."
            find . -name "*.apk" -type f 2>/dev/null || echo "❌ 整个项目中都没有找到APK文件"
          fi

      - name: 生成构建信息
        run: |
          echo "## 📱 Android 构建信息" > build_info.md
          echo "" >> build_info.md
          echo "- **构建时间**: $(date)" >> build_info.md
          echo "- **Flutter版本**: ${{ env.FLUTTER_VERSION }}" >> build_info.md
          echo "- **Java版本**: ${{ env.JAVA_VERSION }}" >> build_info.md
          echo "- **Git提交**: ${{ github.sha }}" >> build_info.md
          echo "" >> build_info.md
          echo "### 📦 构建产物" >> build_info.md
          echo "" >> build_info.md
          find build -name "*.apk" -type f >> build_info.md || echo "没有找到APK文件" >> build_info.md
          find android -name "*.apk" -type f >> build_info.md || echo "Android目录中没有APK文件" >> build_info.md

      - name: 📤 上传 APK 构建产物
        uses: actions/upload-artifact@v4
        with:
          name: android-apks
          path: |
            build/**/*.apk
            android/**/*.apk
            build_info.md
          retention-days: 30

  # 构建Windows应用
  build-windows:
    name: 构建 Windows 应用
    runs-on: windows-latest

    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name:  设置 Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true

      - name:  获取依赖
        run: |
          flutter pub get
          flutter pub run build_runner build --delete-conflicting-outputs

      - name:  创建环境配置文件
        run: |
          echo "SUPABASE_URL=${{ secrets.SUPABASE_URL }}" > .env
          echo "SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY }}" >> .env

      - name:  构建 Windows 应用
        run: |
          flutter build windows --release

      - name: 打包 Windows 应用
        run: |
          Compress-Archive -Path "build\windows\x64\runner\Release\*" -DestinationPath "invest_ledger_windows.zip"

      - name: 上传 Windows 构建产物
        uses: actions/upload-artifact@v4
        with:
          name: windows-app
          path: invest_ledger_windows.zip
          retention-days: 30

  # 创建GitHub Release
  create-release:
    name: 创建 GitHub Release
    needs: [build-android, build-windows]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'

    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 下载所有构建产物
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: 准备发布文件
        run: |
          mkdir -p release_files

          # 列出下载的构建产物目录结构以便调试
          echo "下载的构建产物目录结构:"
          find artifacts -type f | sort

          # 复制Android APK文件 - 使用find命令更可靠地查找和复制文件
          find artifacts/android-apks -name "*.apk" -exec cp {} release_files/ \; || echo "未找到Android APK文件"

          # 复制Windows应用
          cp artifacts/windows-app/*.zip release_files/ || echo "未找到Windows应用文件"

          # 列出所有文件
          echo "发布文件列表:"
          ls -la release_files/

      - name:  生成发布说明
        id: release_notes
        run: |
          # 获取版本号
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
            RELEASE_NOTES="${{ github.event.inputs.release_notes }}"
            IS_PRERELEASE="${{ github.event.inputs.prerelease }}"
          else
            VERSION=${GITHUB_REF#refs/tags/v}
            RELEASE_NOTES=""
            IS_PRERELEASE="false"
          fi

          echo "版本号: $VERSION"
          echo "是否预发布: $IS_PRERELEASE"

          # 设置输出变量
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "is_prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT

          # 生成发布说明
          cat > release_notes.md << EOF
          # InvestLedger v${VERSION}

          ${RELEASE_NOTES}


          ## 📝 更新日志

          - 根据Android版本实现不同的存储权限请求逻辑
          - 改进下载目录获取逻辑，适配Android 11+的分区存储

          ---

      - name: 创建 GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.event_name == 'workflow_dispatch' && format('v{0}', github.event.inputs.version) || github.ref_name }}
          name: InvestLedger v${{ steps.release_notes.outputs.version }}
          body_path: release_notes.md
          files: release_files/*
          draft: false
          prerelease: ${{ steps.release_notes.outputs.is_prerelease == 'true' }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 发布统计
        run: |
          echo "Release创建成功!"
          echo "发布统计:"
          echo "- 版本: ${{ steps.release_notes.outputs.version }}"
          echo "- 预发布: ${{ steps.release_notes.outputs.is_prerelease }}"
          echo "- 文件数量: $(ls -1 release_files/ | wc -l)"
          echo "- 总大小: $(du -sh release_files/ | cut -f1)"

